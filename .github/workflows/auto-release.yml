name: Auto Release
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version_check.outputs.should_release }}
      new_version: ${{ steps.version_check.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if version should be bumped
        id: version_check
        run: |
          # 获取最新的标签
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # 检查是否有新的提交
          COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --count)
          echo "Commits since last tag: $COMMITS_SINCE_TAG"
          
          if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
            # 解析版本号
            VERSION_NUM=$(echo $LATEST_TAG | sed 's/v//')
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
            
            # 检查提交信息中是否包含版本提升关键词
            COMMIT_MESSAGES=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
            
            if echo "$COMMIT_MESSAGES" | grep -qiE "(breaking|major)"; then
              # 主版本号提升
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif echo "$COMMIT_MESSAGES" | grep -qiE "(feat|feature|minor)"; then
              # 次版本号提升
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              # 补丁版本号提升
              PATCH=$((PATCH + 1))
            fi
            
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            echo "New version: $NEW_VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No new commits, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          NEW_VERSION="${{ needs.check-version.outputs.new_version }}"
          echo "Creating tag: $NEW_VERSION"
          
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"